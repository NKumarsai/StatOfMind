plot(M1)
require(reshape2)
df <- melt(league.attendance)
df <- df[!is.na(df[, 1]), ] # remove NA's
df <- df[-which(df[, 1] == 0), ] # remove 0's
#df[, 2] <- df[, 2] + rnorm(nrow(df), mean=0, sd=0.01)
df <- apply(df, 2, as.numeric)
colnames(df) <- c('attendance', 'year')
M1 <- gvisMotionChart(df, idvar="attendance", timevar="year")
plot(M1)
str(df)
class(df)
df <- as.data.frame(df)
str(df)
M1 <- gvisMotionChart(df, idvar="attendance", timevar="year")
plot(M1)
league.attendance
df <- melt(league.attendance)
df
do.call(rbind, league.attendance)
do.call(cbind, league.attendance)
league.attendance
names(league.attendance[[1]])
rep(names(league.attendance[[1]]), 10)
lapply(league.attendance, function(x) names(x))
unlist(lapply(league.attendance, function(x) names(x)))
require(reshape2)
df <- melt(league.attendance)
df <- as.data.frame(df)
df <- df[!is.na(df[, 1]), ] # remove NA's
df <- df[-which(df[, 1] == 0), ] # remove 0's
#df[, 2] <- df[, 2] + rnorm(nrow(df), mean=0, sd=0.01)
df <- apply(df, 2, as.numeric)
colnames(df) <- c('attendance', 'year')
df$team <- as.vector(unlist(lapply(league.attendance, function(x) names(x))))
df
require(reshape2)
df <- melt(league.attendance)
df <- as.data.frame(df)
df$team <- as.vector(unlist(lapply(league.attendance, function(x) names(x))))
df <- df[!is.na(df[, 1]), ] # remove NA's
df <- df[-which(df[, 1] == 0), ] # remove 0's
#df[, 2] <- df[, 2] + rnorm(nrow(df), mean=0, sd=0.01)
df <- apply(df, 2, as.numeric)
colnames(df) <- c('attendance', 'year', 'team')
league.attendance
df <- melt(league.attendance[-(22:26)])
df <- as.data.frame(df)
df$team <- as.vector(unlist(lapply(league.attendance, function(x) names(x))))
df
which(df[, 1] == 0)
df <- df[!is.na(df[, 1]), ] # remove NA's
#df[, 2] <- df[, 2] + rnorm(nrow(df), mean=0, sd=0.01)
df <- apply(df, 2, as.numeric)
colnames(df) <- c('attendance', 'year', 'team')
require(reshape2)
df <- melt(league.attendance[-(22:26)])
df <- as.data.frame(df)
df$team <- as.vector(unlist(lapply(league.attendance, function(x) names(x))))
df <- df[!is.na(df[, 1]), ] # remove NA's
#df[, 2] <- df[, 2] + rnorm(nrow(df), mean=0, sd=0.01)
colnames(df) <- c('attendance', 'year', 'team')
str(df)
require(reshape2)
df <- melt(league.attendance[-(22:26)])
df <- as.data.frame(df)
df$team <- as.vector(unlist(lapply(league.attendance, function(x) names(x))))
df <- df[!is.na(df[, 1]), ] # remove NA's
df[, 2] <- as.numeric(df[, 2])
#df[, 2] <- df[, 2] + rnorm(nrow(df), mean=0, sd=0.01)
colnames(df) <- c('attendance', 'year', 'team')
str(df)
M1 <- gvisMotionChart(df, idvar="attendance", timevar="year")
plot(M1)
require(reshape2)
df <- melt(league.attendance[-(22:26)])
df$team <- as.vector(unlist(lapply(league.attendance, function(x) names(x))))
df <- df[!is.na(df[, 1]), ] # remove NA's
df[, 2] <- as.numeric(df[, 2])
#df[, 2] <- df[, 2] + rnorm(nrow(df), mean=0, sd=0.01)
colnames(df) <- c('attendance', 'year', 'team')
df <- as.data.frame(df)
M1 <- gvisMotionChart(df, idvar="attendance", timevar="year")
df
plot(M1)
plot(M1)
str(df)
M1 <- gvisMotionChart(df, idvar="attendance", timevar="year", date.format = "%Y")
plot(M1)
df
require(reshape2)
df <- melt(league.attendance[-(22:26)])
df$team <- as.vector(unlist(lapply(league.attendance, function(x) names(x))))
df <- df[!is.na(df[, 1]), ] # remove NA's
df[, 2] <- as.numeric(df[, 2])
#df[, 2] <- df[, 2] + rnorm(nrow(df), mean=0, sd=0.01)
colnames(df) <- c('attendance', 'year', 'team')
df <- as.data.frame(as.matrix(df))
M1 <- gvisMotionChart(df, idvar="attendance", timevar="year", date.format = "%Y")
plot(M1)
require(reshape2)
df <- melt(league.attendance[-(22:26)])
df$team <- as.vector(unlist(lapply(league.attendance, function(x) names(x))))
df <- df[!is.na(df[, 1]), ] # remove NA's
df[, 2] <- as.numeric(df[, 2])
#df[, 2] <- df[, 2] + rnorm(nrow(df), mean=0, sd=0.01)
colnames(df) <- c('attendance', 'year', 'team')
df <- as.data.frame(df)
M1 <- gvisMotionChart(df, idvar="attendance", timevar="year", date.format = "%Y")
M1
getwd()
print(M1,"chart", file="league_attendance_motion_chart")
require(reshape2)
df <- melt(league.attendance[-(22:26)])
df$team <- as.vector(unlist(lapply(league.attendance, function(x) names(x))))
df <- df[!is.na(df[, 1]), ] # remove NA's
df[, 2] <- as.numeric(df[, 2])
df[, 1] <- as.numeric(df[, 1])
#df[, 2] <- df[, 2] + rnorm(nrow(df), mean=0, sd=0.01)
colnames(df) <- c('attendance', 'year', 'team')
df <- as.data.frame(df)
M1 <- gvisMotionChart(df, idvar="attendance", timevar="year", date.format = "%Y")
plot(M1)
df
require(reshape2)
df <- melt(league.attendance[-(22:26)])
df$team <- as.vector(unlist(lapply(league.attendance, function(x) names(x))))
df <- df[!is.na(df[, 1]), ] # remove NA's
df[, 2] <- as.numeric(df[, 2])
df[, 1] <- as.numeric(df[, 1])
#df[, 2] <- df[, 2] + rnorm(nrow(df), mean=0, sd=0.01)
colnames(df) <- c('attendance', 'year', 'team')
df <- as.data.frame(df)
M1 <- gvisMotionChart(df, idvar="attendance", timevar="year", date.format = "%Y")
#plot(M1)
print(M1,"chart", file="league_attendance_motion_chart")
M1
as.numeric(df[, 1])
str(df)
require(reshape2)
df <- melt(league.attendance[-(22:26)])
df$team <- as.vector(unlist(lapply(league.attendance, function(x) names(x))))
df <- df[!is.na(df[, 1]), ] # remove NA's
df[, 2] <- as.numeric(df[, 2])
df[, 1] <- as.numeric(as.matrix(df[, 1]))
#df[, 2] <- df[, 2] + rnorm(nrow(df), mean=0, sd=0.01)
colnames(df) <- c('attendance', 'year', 'team')
df <- as.data.frame(df)
M1 <- gvisMotionChart(df, idvar="attendance", timevar="year", date.format = "%Y")
require(reshape2)
df <- melt(league.attendance[-(22:26)])
df$team <- as.vector(unlist(lapply(league.attendance, function(x) names(x))))
df <- df[!is.na(df[, 1]), ] # remove NA's
df[, 2] <- as.numeric(df[, 2])
df[, 1] <- as.numeric(as.matrix(df[, 1]))
#df[, 2] <- df[, 2] + rnorm(nrow(df), mean=0, sd=0.01)
colnames(df) <- c('attendance', 'year', 'team')
df <- as.data.frame(df)
M1 <- gvisMotionChart(df, idvar="attendance", timevar="year", date.format = "%Y")
plot(M1)
M1 <- gvisMotionChart(Fruits, idvar="Fruit", timevar="Year")
M1
require(reshape2)
df <- melt(league.attendance[-(22:26)])
df$team <- as.vector(unlist(lapply(league.attendance, function(x) names(x))))
df <- df[!is.na(df[, 1]), ] # remove NA's
df[, 2] <- as.numeric(df[, 2])
df[, 1] <- as.numeric(as.matrix(df[, 1]))
#df[, 2] <- df[, 2] + rnorm(nrow(df), mean=0, sd=0.01)
colnames(df) <- c('attendance', 'year', 'team')
df <- as.data.frame(df)
str(df)
M1 <- gvisMotionChart(df, idvar="team", timevar="year", date.format = "%Y")
plot(M1)
attendance.chart <- gvisMotionChart(df, idvar="team", timevar="year", date.format = "%Y")
#plot(attendance.chart)
print(attendance.chart, "chart", file="league_attendance_motion_chart")
print(attendance.chart, "chart", file="league_attendance_motion_chart")
require(reshape2)
df <- melt(league.attendance[-(22:26)])
df$team <- as.vector(unlist(lapply(league.attendance, function(x) names(x))))
df <- df[!is.na(df[, 1]), ] # remove NA's
df[, 2] <- as.numeric(df[, 2])
df[, 1] <- as.numeric(as.matrix(df[, 1]))
#df[, 2] <- df[, 2] + rnorm(nrow(df), mean=0, sd=0.01)
colnames(df) <- c('attendance', 'year', 'team')
df <- as.data.frame(df)
attendance.chart <- gvisMotionChart(df, idvar="team", timevar="year", date.format = "%Y")
#plot(attendance.chart)
print(attendance.chart, "chart", file="league_attendance_motion_chart")
plot(attendance.chart)
setwd("~/Documents/GitHub/NBA/League_attendance")
library(reshape2)
library(beeswarm)
library(ggplot2)
library(grid)
library(gridExtra)
# read team abbreviations
team.abb <- read.csv(file='Team_abbreviation.txt', header=FALSE)
# read win share data
franchise.wins <- read.csv(file='franchise_wins.txt', header=TRUE)
# define franchises that changed names at some point between 1981 and 2013
# could do this via shell scripting but defining this here for transparency
# (should also consider the fact that they changed arenas!)
## sed -e 's/oldteam/newteam/g' original.txt > new.txt
old.franchise <- c('Washington Bullets', 'Kansas City Kings', 'San Diego Clippers', 'Seattle SuperSonics', 'New Jersey Nets', 'Charlotte Hornets', 'New Orleans Hornets', 'Vancouver Grizzlies')
new.franchise <- c('Washington Wizards', 'Sacramento Kings', 'Los Angeles Clippers', 'Oklahoma City Thunder', 'Brooklyn Nets', 'Charlotte Bobcats', 'New Orleans Pelicans', 'Memphis Grizzlies')
# read league attendance for every season betweem 1981 and 2013
year <- 1981:2013
league.attendance <- offense <- defense <- vector('list', length(year))
names(league.attendance) <- names(offense) <- names(defense) <- year
for(y in 1:length(year))
{
# read in file with league attendance records
input.file <- sprintf('League_attendance_%s.txt', year[y])
if(file.info(input.file)$size > 0) # data fo year 2002-2006 was not available
{
dat <- scan(file=sprintf('League_attendance_%s.txt', year[y]), what="raw()", sep='\n')
attendance <- mat.or.vec(length(dat), 1)
teams.file <- mat.or.vec(length(dat), 1)
for(i in 1:length(dat))
{
str <- strsplit(dat[i], split=' ')[[1]]
last.item <- str[length(str)]
last.item <- strsplit(last.item, split=',')[[1]][-1]
attendance[i] <- as.numeric(paste(last.item, collapse=""))
names(attendance)[i] <- strsplit(dat[i], split=',')[[1]][2]
}
# manually change franchise names to most recent
for(o in 1:length(old.franchise))
{
index <- match(old.franchise[o], names(attendance))
if(!is.na(index))
{
names(attendance)[index] <- new.franchise[o]
}
}
# change franchise names to team abbreviations
index <- match(names(attendance), team.abb[,2])
names(attendance) <- team.abb[index, 1]
league.attendance[[y]] <- attendance
}
else
{
league.attendance[[y]] <- rep(0, 20)
}
# read in file with franchise offense statistics
offense.file <- sprintf('Team_stats_%s.txt', year[y])
if(file.info(offense.file)$size > 0)
{
dat <- read.csv(file=offense.file, header=FALSE)
offense[[y]] <- as.numeric(dat[, ncol(dat)])
names(offense[[y]]) <- dat[, 2]
# manually change franchise names to most recent
for(o in 1:length(old.franchise))
{
index <- match(old.franchise[o], names(offense[[y]]))
if(!is.na(index))
{
names(offense[[y]])[index] <- new.franchise[o]
}
}
# change franchise names to team abbreviations
index <- match(names(offense[[y]]), team.abb[,2])
names(offense[[y]]) <- team.abb[index, 1]
}
else
{
offense[[y]] <- rep(0, 20)
}
# read in file with franchise defense statistics
defense.file <- sprintf('Opponent_stats_%s.txt', year[y])
if(file.info(defense.file)$size > 0)
{
dat <- read.csv(file=defense.file, header=FALSE)
defense[[y]] <- as.numeric(dat[, ncol(dat)])
names(defense[[y]]) <- dat[, 2]
# manually change franchise names to most recent
for(o in 1:length(old.franchise))
{
index <- match(old.franchise[o], names(defense[[y]]))
if(!is.na(index))
{
names(defense[[y]])[index] <- new.franchise[o]
}
}
# change franchise names to team abbreviations
index <- match(names(defense[[y]]), team.abb[,2])
names(defense[[y]]) <- team.abb[index, 1]
}
else
{
defense[[y]] <- rep(0, 20)
}
}
####################################################
# plot distribution of NBA league attendance by year
par(mar=c(6,7,4,2))
stripchart(league.attendance,
cex=0.75,
col='blue',
pch=20,
las=2,
vertical = TRUE,
cex.axis=1.5)
boxplot(league.attendance,
las=2,
outcex=0,
boxlwd=3,
col="#0000ff22",
cex.axis=0.01,
cex.lab=2,
ylab='',
add=T,
names = rep('', length(year)))
text(c(19, 32), c(520000, 760000), labels=c('*', '*'), col='red', cex=2)
mtext(side=2, 'NBA League Attendance', line=5, cex=2)
attendance.per.offense <- vector('list', length(year))
attendance.per.defense <- vector('list', length(year))
names(attendance.per.offense) <- names(attendance.per.defense) <- year
for(y in 1:length(year))
{
# find correlation between number of points scored by team and attendance
index <- match(names(league.attendance[[y]]), names(offense[[y]]))
index <- index[!is.na(index)]
if(length(index) > 0)
{
attendance.per.offense[[y]] <- cbind(offense[[y]][index], league.attendance[[y]])
# account for high/low-scoring seasons
attendance.per.offense[[y]][,1] <- attendance.per.offense[[y]][,1] - mean(attendance.per.offense[[y]][,1], na.rm=TRUE)
}
# find correlation between number of points scored against team and attendance
index <- match(names(league.attendance[[y]]), names(defense[[y]]))
index <- index[!is.na(index)]
if(length(index) > 0)
{
attendance.per.defense[[y]] <- cbind(defense[[y]][index], league.attendance[[y]])
# account for high/low-scoring seasons
attendance.per.defense[[y]][,1] <- attendance.per.defense[[y]][,1] - mean(attendance.per.defense[[y]][,1], na.rm=TRUE)
}
}
# transform lists into dataframes compatible for plotting in ggplot
# remove item 22 to 26 (missing data for these years)
df.offense <- as.data.frame(do.call(rbind, attendance.per.offense[-c(22:26)]))
colnames(df.offense) <- c('points', 'attendance')
df.defense <- as.data.frame(do.call(rbind, attendance.per.defense[-c(22:26)]))
colnames(df.defense) <- c('points', 'attendance')
# plot correlation between fan attendance and points scored/against
# use grid setup and ggplot
p1 = ggplot(df.offense, aes(x=points-1, y=attendance)) +
geom_point(size=4, colour='royalblue3') +
geom_smooth(method=lm, size=2.5, colour='black') +
theme_classic() +
xlim(-10,10) +
ylab('Fan Attendance') + xlab('Points scored by home team compared to league average') +
theme(axis.text.x=element_text(size=22), axis.text.y=element_text(size=22)) +
theme(axis.title.x=element_text(size=26), axis.title.y=element_text(size=26)) +
theme(legend.title = element_text(size=14)) +
theme(legend.text = element_text(size = 13))
p2 = ggplot(df.defense, aes(x=points-1, y=attendance)) +
geom_point(size=3.5, colour='indianred3') +
geom_smooth(method=lm, size=2.5, colour='black') +
theme_classic() +
xlim(-10,10) +
ylab('Fan Attendance') + xlab('Points scored against home team compared to league average') +
theme(axis.text.x=element_text(size=22), axis.text.y=element_text(size=22)) +
theme(axis.title.x=element_text(size=26), axis.title.y=element_text(size=26)) +
theme(legend.title = element_text(size=14)) +
theme(legend.text = element_text(size = 13))
grid.arrange(p1, p2, ncol = 2, main = "")
count <- length(year) + 1
win.attendance <- vector('list', length(year))
for(y in 1:length(year))
{
print(y)
count <- count - 1
win.ratio <- franchise.wins[count, -(1:3)]
index <- match(names(league.attendance[[y]]), names(win.ratio))
index <- index[!is.na(index)]
win.attendance[[y]] <- cbind(as.vector(as.matrix(win.ratio[index])), league.attendance[[y]])
}
# create dataframe across all time and also assign conference membership of each team
all.dat <- do.call(rbind, win.attendance[-(22:26)])
# find number of fans attending per wins
unique.teams <- sort(unique(row.names(all.dat)))
attendance.per.win <- vector('list', length(unique.teams))
names(attendance.per.win) <- unique.teams
for(u in 1:length(unique.teams))
{
index <- which(row.names(all.dat) == unique.teams[u])
attendance.per.win[[u]] <- apply(all.dat[index, ], 1, function(x) x[2] / x[1])
}
# sort teams by median number of fans attending per games won
index <- order(unlist(lapply(attendance.per.win, function(x) median(x, na.rm=TRUE) )), decreasing=FALSE)
attendance.per.win <- attendance.per.win[index]
# plot violin plots, where each violin represents the distribution of fan attendance
# for a given team during the period 1981-2013
df <- melt(attendance.per.win)
df$L1 <- factor(df$L1, levels=names(attendance.per.win))
ggplot(df, aes(y=value, x=L1)) +
geom_violin(colour='royalblue3', size=1.4, scale='width') +
theme_bw() +
geom_boxplot(width=.4, size=1.2) +
ylab('Attendance per winning game\n between 1981-2013') +
xlab('') +
theme(axis.text.x=element_text(size=18, angle=45, vjust=0.5), axis.text.y=element_text(size=18)) +
theme(axis.title.y=element_text(size=22)) +
geom_hline(aes(yintercept=median(df[,1], na.rm=TRUE)), colour='indianred3', size=2)
?gvisMotionChart
setwd("~/Documents/GitHub/NBA/NBA_carbon_footprint")
# read NBA team schedule for season 2013-2014
schedule <- read.table(file='NBA_schedule.txt', header=FALSE, sep='\t')
# filter out date entries
game.index <- grep('@', schedule[, 1], fixed=TRUE)
schedule <- schedule[game.index, ]
# find all homes arenas of each NBA team
away.team <- as.vector(sapply(as.vector(schedule[, 1]),
function(x) strsplit(x, split=' @ ', fixed=TRUE)[[1]][1]))
home.team <- as.vector(sapply(as.vector(schedule[, 1]),
function(x) strsplit(x, split=' @ ', fixed=TRUE)[[1]][2]))
games.played <- cbind(away.team, home.team)
home.arenas <- cbind(as.vector(home.team), as.vector(schedule[, 3]))
home.arenas <- unique(home.arenas)
####! Only needs to be ran once !#
# source('find_arena_location.R')
####! Only needs to be ran once !#
load(file='NBA_arena_coordinates.Rdata')
earth.dist <- function (lon1, lat1, lon2, lat2, R)
{
rad <- pi/180
a1 <- lat1 * rad
a2 <- lon1 * rad
b1 <- lat2 * rad
b2 <- lon2 * rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
d <- R * c
real.d <- min(abs((R*2) - d), d)
return(real.d)
}
# compute distance between each NBA arena
dist.mat <- mat.or.vec(nrow(arena.geo.tag), nrow(arena.geo.tag))
colnames(dist.mat) <- row.names(dist.mat) <- arena.geo.tag[, 1]
R <- 6378.145 # define radius of earth in km
for(i in 1:nrow(home.arenas))
{
for(j in 1:nrow(home.arenas))
{
lon1 <- arena.geo.tag$lon[i]
lat1 <- arena.geo.tag$lat[i]
lon2 <- arena.geo.tag$lon[j]
lat2 <- arena.geo.tag$lat[j]
dist.mat[i, j] <- earth.dist(lon1, lat1, lon2, lat2, R)
}
}
# find miles travelled by each team
all.teams <- sort(as.vector(arena.geo.tag[, 1]))
team.travel <- mat.or.vec(length(all.teams), length(all.teams))
colnames(team.travel) <- row.names(team.travel) <- all.teams
#cum.miles <- mat.or.vec(nrow(games.played), 1)
for(i in 1:length(all.teams))
{
# find all instances where team travelled
index.away <- which(games.played[, 1] == all.teams[i])
for(j in 1:length(all.teams))
{
# find all instance of host team
index.home <- which(games.played[, 2] == all.teams[j])
number.of.game <- length(intersect(index.away, index.home))
# find distance between both teams and multiply by number of times they travelled
if(number.of.game > 0)
{
distance <- dist.mat[which(row.names(dist.mat) == all.teams[i]), which(colnames(dist.mat) == all.teams[j])]
team.travel[i, j] <- distance * number.of.game
#cum.miles[intersect(index.away, index.home)] <- distance
}
}
}
# Total miles travelled by all NBA teams
cat('Teams travelled a total of ', sum(team.travel), '\n')
# sort teams according to km travelled
team.distance <- sort(apply(team.travel, 1, sum), decreasing=TRUE)
team.distance <- round(team.distance, 0)
#html.code <- sapply(team.distance, function(x) paste(names(x), round(x, 0), sep='</td><td>'))
#html.code <- paste(names(team.distance), html.code, sep='')
#sapply(html.code, function(x) cat('<tr><td>', x, '</td></tr>\n'))
total.emission <- sum(team.travel) * 9.92
team.emission <- sort(apply(team.travel, 1, sum) * 9.92)
library(maps)
library(geosphere)
require(ggplot2)
map("state", col="#f2f2f2", fill=TRUE, bg="white", lwd=0.1, mar=c(0.1, 0.1, 0.1, 0.1))
#map("state", col="#191919", fill=TRUE, bg="#000000", lwd=0.2, mar=c(0.1, 0.1, 0.1, 0.1))
max.point.size <- 4
for(i in 1:nrow(arena.geo.tag))
{
point.cex <- (team.distance[which(names(team.distance) == as.vector(arena.geo.tag[i, 1]))] * max.point.size) / team.distance[1]
points(arena.geo.tag[i, 3:4], col='black', cex=point.cex, pch=21, bg='royalblue3')
}
for (i in 1:nrow(games.played))
{
index.home <- which(as.vector(arena.geo.tag[, 1]) == games.played[i, 2])
index.away <- which(as.vector(arena.geo.tag[, 1]) == games.played[i, 1])
inter <- gcIntermediate(arena.geo.tag[index.away, 3:4],
arena.geo.tag[index.home, 3:4],
n=100,
addStartEnd=TRUE)
lines(inter, lwd=0.7, col="#0000ff30")
#lines(inter, lwd=0.2, col="white")
}
